// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	models "github.com/pasha1coil/testingmelvad/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTasks is a mock of Tasks interface.
type MockTasks struct {
	ctrl     *gomock.Controller
	recorder *MockTasksMockRecorder
}

// MockTasksMockRecorder is the mock recorder for MockTasks.
type MockTasksMockRecorder struct {
	mock *MockTasks
}

// NewMockTasks creates a new mock instance.
func NewMockTasks(ctrl *gomock.Controller) *MockTasks {
	mock := &MockTasks{ctrl: ctrl}
	mock.recorder = &MockTasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasks) EXPECT() *MockTasksMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockTasks) AddUser(user *models.Users) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockTasksMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockTasks)(nil).AddUser), user)
}

// CalculateHMAC mocks base method.
func (m *MockTasks) CalculateHMAC(hmac *models.Hash) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateHMAC", hmac)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateHMAC indicates an expected call of CalculateHMAC.
func (mr *MockTasksMockRecorder) CalculateHMAC(hmac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateHMAC", reflect.TypeOf((*MockTasks)(nil).CalculateHMAC), hmac)
}

// Increment mocks base method.
func (m *MockTasks) Increment(incr *models.Incr) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", incr)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockTasksMockRecorder) Increment(incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockTasks)(nil).Increment), incr)
}
